<?php

namespace Epic\R2RioBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * R2SearchSegmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class R2SearchSegmentRepository extends EntityRepository
{
    public function update(R2SearchSegment $entity)
    {
        $this->_em->persist($entity);
        $this->_em->flush();
    }

    public function remove(R2SearchSegment $entity)
    {
        $this->_em->remove($entity);
        $this->_em->flush();
    }

    public function datableElement($route, $start = 0, $limit = 10, $order = array(), $filter ='')
    {
        $query = $this->createQueryBuilder('entity');
        $query->innerJoin('entity.searchRoute', 'route');
        $query->where($query->expr()->eq('route.id',':routeId'));
        $query->setParameter('routeId', $route);
        $query->setFirstResult($start);
        $query->setMaxResults($limit);
        if(!empty($order)) {
            switch($order['column']) {
                case 1:
                    $query->addOrderBy('entity.kind',$order['dir']);
                    break;
                case 2:
                    $query->addOrderBy('entity.subKind',$order['dir']);
                    break;
                case 3:
                    $query->addOrderBy('entity.distance',$order['dir']);
                    break;
                case 4:
                    $query->addOrderBy('entity.duration',$order['dir']);
                    break;
                case 5:
                    $query->addOrderBy('entity.sName',$order['dir']);
                    break;
                case 6:
                    $query->addOrderBy('entity.sPos',$order['dir']);
                    break;
                case 7:
                    $query->addOrderBy('entity.sCode',$order['dir']);
                    break;
                case 8:
                    $query->addOrderBy('entity.tName',$order['dir']);
                    break;
                case 9:
                    $query->addOrderBy('entity.tPos',$order['dir']);
                    break;
                case 10:
                    $query->addOrderBy('entity.tCode',$order['dir']);
                    break;
                case 11:
                    $query->addOrderBy('entity.indicativePrice',$order['dir']);
                    break;
                default:
                    $query->addOrderBy('entity.id', $order['dir']);
            }
        }

        if(!empty($filter)) {
            $query = $this->addQueryFilter($query, $filter);
        }

        return $query->getQuery()->getResult();
    }

    public function getCountTotal($route)
    {
        $query = $this->createQueryBuilder('entity');
        $query->innerJoin('entity.searchRoute', 'route');
        $query->where($query->expr()->eq('route.id',':routeId'));
        $query->setParameter('routeId', $route);
        $query->select($query->expr()->count('entity.id'));
        return $query->getQuery()->getSingleScalarResult();
    }

    public function getFilterTotal($route, $filter)
    {
        $query = $this->createQueryBuilder('entity');
        $query->innerJoin('entity.searchRoute', 'route');
        $query->where($query->expr()->eq('route.id',':routeId'));
        $query->setParameter('routeId', $route);
        $query->select($query->expr()->count('entity.id'));
        $query = $this->addQueryFilter($query, $filter);

        return $query->getQuery()->getSingleScalarResult();
    }

    private function addQueryFilter(QueryBuilder $query, $filter)
    {
        $expr = $query->expr();
        /*$query->orWhere($expr->eq('entity.id', ':filter_int'));*/
        $query->andWhere($expr->orX(
            $expr->like('entity.kind',':filter_str'),
            $expr->like('entity.subKind',':filter_str'),
            $expr->like('entity.sName',':filter_str'),
            $expr->like('entity.tName',':filter_str')
        ));
        /*$query->setParameter('filter_int', $filter);*/
        $query->setParameter('filter_str', '%'.$filter.'%');

        return $query;
    }
}
